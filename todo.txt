Matricula aluno:
- Puxar as turmas disponíveis das quais as disciplinas lecionadas sejam disciplinas em que aluno ainda não foi aprovado (Código disciplina, nome, carga horaria, horário começo e horário fim, professor)
- Puxar nome da disciplina + estado da solicitação (no banco está como "situacao_aluno" na tabela Turma_Aluno)
- Popular "Turma_Aluno" com a Turma e status "Matricula Solicitada" para a matricula do aluno (caso a turma não tenha mais vagas, o status deve ser automaticamente "Matricula Rejeitada" (Pra isso a gente pode fazer um trigger que conta a qntd de matricula pra nao precisar fazer um " COUNT(*) FROM Turma_Aluno t where t.disciplina = x and where t.situacao_aluno like "Matricula S%"  " Pra toda vez que for ver se tá extrapolando o n de vagas.

Cadastrar uma turma:
- Puxar os professores do bd de acordo com o centro (nome, matricula, centro)
- puxar as salas livres usando a procedure "salas livres" (vou revisar essa procedure)
- puxar horários de aula disponíveis (isso vai ser com base nos horários disponíveis da sala).
- Capacidade de criar uma Turma e popular ela com a chaves primarias dos dados selecionados


CREATE DATABASE matriculas;
USE matriculas;

CREATE TABLE Centro (
    codigo_centro VARCHAR(10) NOT NULL,
    PRIMARY KEY (codigo_centro)
);
INSERT INTO Centro (codigo_centro) VALUES
    ('CAL'), ('CCNE'), ('CCR'), ('CCS'),
    ('CCSH'), ('CE'), ('CEFD'), ('CT'),
    ('CTISM'), ('POLI'), ('CS'), ('FW'), ('PM');

CREATE TABLE Sala (
    centro VARCHAR(10) NOT NULL,
    numero INT NOT NULL,
    capacidade_alunos TINYINT NOT NULL,
    tipo ENUM('Laboratório', 'Sala'),
    PRIMARY KEY (centro, numero),
    FOREIGN KEY (centro) REFERENCES Centro(codigo_centro)
);

CREATE TABLE Disciplina (
    codigo_disciplina VARCHAR(10) NOT NULL,
    nome VARCHAR(100) NOT NULL,
    semestre_disciplina TINYINT NOT NULL,
    ementa VARCHAR(220),
    carga_horaria INT,
    PRIMARY KEY (codigo_disciplina)
);

-- Tabela Curso
CREATE TABLE Curso (
    id INT NOT NULL AUTO_INCREMENT,
    nome VARCHAR(100) NOT NULL,
    campus VARCHAR(100) NOT NULL,
    ementa VARCHAR(220),  -- URL da ementa
    centro VARCHAR(10) NOT NULL,
    PRIMARY KEY (id),
    FOREIGN KEY (centro) REFERENCES Centro(codigo_centro)
);

CREATE TABLE Professor (
    Matricula BIGINT NOT NULL,
    nome VARCHAR(100) NOT NULL,
    centro VARCHAR(10) NOT NULL,
    PRIMARY KEY (Matricula),
    FOREIGN KEY (centro) REFERENCES Centro(codigo_centro)
);

CREATE TABLE Aluno (
    matricula BIGINT NOT NULL,
    nome VARCHAR(100) NOT NULL,
    id_curso INT NOT NULL,
    PRIMARY KEY (matricula),
    FOREIGN KEY (id_curso) REFERENCES Curso(id)
);

CREATE TABLE Turma (
    ano YEAR NOT NULL,
    semestre_turma ENUM('1','2') NOT NULL,
    N_vagas INT,
    data_inicio DATE,
    data_fim DATE,
    codigo_disciplina VARCHAR(10) NOT NULL,
    Matricula_Professor BIGINT NOT NULL,
    Centro_Sala VARCHAR(10) NOT NULL,
    Numero_Sala INT NOT NULL,
    dia_semana ENUM('Seg', 'Ter', 'Qua', 'Qui', 'Sex', 'Sab', 'Dom') NOT NULL,
    hora_inicio TIME NOT NULL,
    hora_fim TIME NOT NULL,
    PRIMARY KEY (ano, semestre_turma, codigo_disciplina, Matricula_Professor),
    FOREIGN KEY (codigo_disciplina) REFERENCES Disciplina(codigo_disciplina),
    FOREIGN KEY (Matricula_Professor) REFERENCES Professor(Matricula),
    FOREIGN KEY (Centro_Sala, Numero_Sala) REFERENCES Sala(centro, numero),
    CHECK (hora_inicio >= '07:30:00' AND hora_inicio <= '20:00:00'),
    CHECK (hora_fim >= ADDTIME(hora_inicio, '01:00:00') AND hora_fim <= ADDTIME(hora_inicio, '04:00:00')),
    CHECK (hora_fim <= '23:00:00')
);

CREATE TABLE Turma_Aluno (
    ano_turma YEAR NOT NULL,
    semestre_turma ENUM ('1','2') NOT NULL,
    codigo_disciplina VARCHAR(10) NOT NULL,
    Matricula_Aluno BIGINT NOT NULL,
    Matricula_Professor BIGINT NOT NULL,
    situacao_aluno ENUM('Matricula', 'Aprovado com nota', 'Reprovado por Frequência', 'Reprovado com Nota'),
    PRIMARY KEY (ano_turma, semestre_turma, codigo_disciplina, Matricula_Aluno),
    FOREIGN KEY (ano_turma, semestre_turma, codigo_disciplina, Matricula_Professor)
        REFERENCES Turma(ano, semestre_turma, codigo_disciplina, Matricula_Professor),
    FOREIGN KEY (Matricula_Aluno) REFERENCES Aluno(matricula)
);
